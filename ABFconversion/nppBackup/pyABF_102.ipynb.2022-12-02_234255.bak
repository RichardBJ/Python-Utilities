{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " https://github.com/swharden/pyABF/tree/master/data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pyabf\n",
    "import numpy as np\n",
    "import pandas as PD\n",
    "import matplotlib.pyplot as plt\n",
    "plt.rcParams[\"figure.figsize\"]=25,5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2021.03.23\\Cell_1 HEK_BKCa_0000.abf\n",
      "2021.03.23\\Cell_2 HEK_BKCa_0000.abf\n",
      "2021.03.23\\Cell_2 HEK_BKCa_0001.abf\n",
      "2021.03.23\\Cell_3 HEK_BKCa_0000.abf\n",
      "2021.03.23\\Cell_3 HEK_BKCa_0001.abf\n",
      "2021.03.23\\Cell_4 HEK_BKCa_0000.abf\n",
      "2021.03.23\\Cell_5 HEK_BKCa_0000.abf\n",
      "2021.03.23\\Cell_6 HEK_BKCa_0000.abf\n",
      "2021.03.29\\Cell_1 HEK_BKCa_0000.abf\n",
      "2021.03.29\\Cell_1 HEK_BKCa_0001.abf\n",
      "2021.03.29\\Cell_1 HEK_BKCa_0002.abf\n",
      "2021.03.29\\Cell_2 HEK_BKCa_0000.abf\n",
      "2021.03.29\\Cell_2 HEK_BKCa_0001.abf\n",
      "2021.03.29\\Cell_2 HEK_BKCa_0002.abf\n",
      "2021.03.29\\Cell_3 HEK_BKCa_0000.abf\n",
      "2021.03.29\\Cell_4 HEK_BKCa_0000.abf\n",
      "2021.03.29\\Cell_4 HEK_BKCa_0001.abf\n",
      "2021.03.29\\Cell_6 HEK_BKCa_0000.abf\n",
      "2021.03.29\\Cell_6 HEK_BKCa_0001.abf\n",
      "2021.03.29\\Cell_7 HEK_BKCa_0000.abf\n",
      "2021.03.29\\Cell_8 HEK_BKCa_0000.abf\n",
      "2021.03.29\\Cell_9HEK_BKCa_0000.abf\n",
      "2021.03.30\\Cell_1_HEK_BKCa_0000.abf\n",
      "2021.03.30\\Cell_1_HEK_BKCa_0001.abf\n",
      "2021.03.30\\Cell_2_HEK_BKCa_0000.abf\n",
      "2021.03.30\\Cell_2_HEK_BKCa_0001.abf\n",
      "2021.03.30\\Cell_2_HEK_BKCa_0002.abf\n",
      "2021.03.30\\Cell_2_HEK_BKCa_0003.abf\n",
      "2021.03.30\\Cell_4_HEK_BKCa_0000.abf\n",
      "2021.03.30\\Cell_4_HEK_BKCa_0001.abf\n",
      "2021.03.30\\Cell_5_HEK_BKCa_0000.abf\n",
      "2021.03.30\\Cell_6_HEK_BKCa_0000.abf\n",
      "2021.03.30\\Cell_6_HEK_BKCa_0001.abf\n",
      "2021.03.30\\Cell_6_HEK_BKCa_0002.abf\n",
      "2021.03.30\\Cell_7_HEK_BKCa_0000.abf\n",
      "2021.03.30\\Cell_7_HEK_BKCa_0001.abf\n",
      "2021.03.30\\Cell_7_HEK_BKCa_0002.abf\n",
      "2021.03.30\\Cell_8_HEK_BKCa_0000.abf\n",
      "2021.03.30\\Cell_8_HEK_BKCa_0001.abf\n",
      "2021.03.30\\Cell_8_HEK_BKCa_0002.abf\n",
      "2021.03.30\\Cell_9_HEK_BKCa_0000.abf\n",
      "2021.03.30\\Cell_9_HEK_BKCa_0001.abf\n",
      "2021.03.30\\Cell_9_HEK_BKCa_0002.abf\n",
      "2021.04.09\\Cell_10_HEK_BKCa_0000.abf\n",
      "2021.04.09\\Cell_11_HEK_BKCa_0000.abf\n",
      "2021.04.09\\Cell_11_HEK_BKCa_0001.abf\n",
      "2021.04.09\\Cell_11_HEK_BKCa_0002.abf\n",
      "2021.04.09\\Cell_1_HEK_BKCa_0000.abf\n",
      "2021.04.09\\Cell_1_HEK_BKCa_0001.abf\n",
      "2021.04.09\\Cell_2_HEK_BKCa_0000.abf\n",
      "2021.04.09\\Cell_3_HEK_BKCa_0000.abf\n",
      "2021.04.09\\Cell_3_HEK_BKCa_0001.abf\n",
      "2021.04.09\\Cell_4_HEK_BKCa_0000.abf\n",
      "2021.04.09\\Cell_5_HEK_BKCa_0000.abf\n",
      "2021.04.09\\Cell_5_HEK_BKCa_0001.abf\n",
      "2021.04.09\\Cell_6_HEK_BKCa_0000.abf\n",
      "2021.04.09\\Cell_6_HEK_BKCa_0001.abf\n",
      "2021.04.09\\Cell_8_HEK_BKCa_0000.abf\n",
      "2021.04.09\\Cell_9_HEK_BKCa_0000.abf\n",
      "2021.04.09\\Cell_9_HEK_BKCa_0001.abf\n",
      "2021.04.12\\Cell_1_HEK_BKCa_0000.abf\n",
      "2021.04.12\\Cell_1_HEK_BKCa_0001.abf\n",
      "2021.04.12\\Cell_2_HEK_BKCa_0000.abf\n",
      "2021.04.12\\Cell_3_HEK_BKCa_0000.abf\n",
      "2021.04.12\\Cell_4_HEK_BKCa_0000.abf\n",
      "2021.04.12\\Cell_4_HEK_BKCa_0001.abf\n",
      "2021.04.12\\Cell_5_HEK_BKCa_0000.abf\n",
      "2021.04.12\\Cell_6_HEK_BKCa_0000.abf\n",
      "2021.04.13\\Cell_1_HEK_BKCa_0000.abf\n",
      "2021.04.13\\Cell_2_HEK_BKCa_0000.abf\n",
      "2021.04.13\\Cell_2_HEK_BKCa_0001.abf\n",
      "2021.04.15\\Cell_11_HEK_BKCa_0000.abf\n",
      "2021.04.15\\Cell_11_HEK_BKCa_0001.abf\n",
      "2021.04.15\\Cell_12_HEK_BKCa_0000.abf\n",
      "2021.04.15\\Cell_13_HEK_BKCa_0000.abf\n",
      "2021.04.15\\Cell_16_HEK_BKCa_0000.abf\n",
      "2021.04.15\\Cell_17_HEK_BKCa_0000.abf\n",
      "2021.04.15\\Cell_17_HEK_BKCa_0001.abf\n",
      "2021.04.15\\Cell_17_HEK_BKCa_0002.abf\n",
      "2021.04.15\\Cell_1_HEK_BKCa_0000.abf\n",
      "2021.04.15\\Cell_1_HEK_BKCa_0001.abf\n",
      "2021.04.15\\Cell_1_HEK_BKCa_0002.abf\n",
      "2021.04.15\\Cell_3_HEK_BKCa_0000.abf\n",
      "2021.04.15\\Cell_4_HEK_BKCa_0000.abf\n",
      "2021.04.15\\Cell_5_HEK_BKCa_0000.abf\n",
      "2021.04.15\\Cell_5_HEK_BKCa_0001.abf\n",
      "2021.04.15\\Cell_6_HEK_BKCa_0000.abf\n",
      "2021.04.15\\Cell_7_HEK_BKCa_0000.abf\n",
      "2021.04.15\\Cell_9_HEK_BKCa_0000.abf\n",
      "2021.04.15\\Cell_9_HEK_BKCa_0001.abf\n",
      "2021.04.16\\Cell_1_HEK_BKCa_0000.abf\n",
      "2021.04.16\\Cell_2_HEK_BKCa_0000.abf\n",
      "2021.04.16\\Cell_3_HEK_BKCa_0000.abf\n",
      "2021.04.16\\Cell_5_HEK_BKCa_0000.abf\n",
      "2021.04.16\\Cell_5_HEK_BKCa_0001.abf\n",
      "2021.04.16\\Cell_6_HEK_BKCa_0000.abf\n",
      "2021.04.19\\Cell_10_HEK_BKCa_0000.abf\n",
      "2021.04.19\\Cell_11_HEK_BKCa_0000.abf\n",
      "2021.04.19\\Cell_11_HEK_BKCa_0001.abf\n",
      "2021.04.19\\Cell_1_HEK_BKCa_0000.abf\n",
      "2021.04.19\\Cell_3_HEK_BKCa_0000.abf\n",
      "2021.04.19\\Cell_5_HEK_BKCa_0000.abf\n",
      "2021.04.19\\Cell_5_HEK_BKCa_0001.abf\n",
      "2021.04.19\\Cell_5_HEK_BKCa_0002.abf\n",
      "2021.05.14\\Cell_10_HEKBK_0001.abf\n",
      "2021.05.14\\Cell_8_HEKBK_0000.abf\n",
      "2021.05.16\\Cell_3_HEKBK_0000.abf\n"
     ]
    }
   ],
   "source": [
    "import glob\n",
    "files = glob.glob(\"**/*.abf\", recursive=True )\n",
    "for file in files:\n",
    "    print (file)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "WRITE_STATUS = True\n",
    "PLOT = True\n",
    "CONVERT = True\n",
    "decfac = 5\n",
    "def do_file(infile):\n",
    "    abf = pyabf.ABF(infile)\n",
    "    abf.setSweep(0)\n",
    "    print(f\"\\nSample Rate {abf.dataRate} Hz\")\n",
    "    print(f\"Sample Rate {abf.dataPointsPerMs} kHz\")\n",
    "    print(f\"Sample Interval {1/abf.dataRate} s\")\n",
    "    print(f\"Sample Interval {1/abf.dataPointsPerMs} ms\") \n",
    "    print(f\"\\nNOTE THIS WAS DECIMATED WITH A FACTOR OF {decfac} where 1 = no decimation\")\n",
    "    print(f\"Duration {abf.dataLengthSec} s\")\n",
    "    print(f\"N data points {abf.dataPointCount}\")\n",
    "    voltages=np.round(abf.sweepC/10)*10\n",
    "    df=PD.DataFrame({\"current\":abf.sweepY, \"voltage\":voltages})\n",
    "    voltages = np.unique(voltages)   \n",
    "    for volt in voltages:\n",
    "        print(f'Voltage=',volt)\n",
    "        if CONVERT:\n",
    "            '''dfv will be votlage free df so stupid name!'''\n",
    "            mask = (df['voltage'] == volt)\n",
    "            dfv=df[mask]\n",
    "            fileout=infile.replace(\".abf\",\"_\"+str(volt)+\"Vm\"+\".txt\")\n",
    "            dfv=dfv.drop(columns=['voltage'])\n",
    "            dfv=dfv.iloc[::decfac, :]\n",
    "            dfv.to_csv(fileout, index=False, header=False)\n",
    "        if PLOT:\n",
    "            plt.figure(num=1, clear=True)\n",
    "            plt.subplot(2,1,1)\n",
    "            plt.title(infile)\n",
    "            if abf.dataPointCount > 100000:\n",
    "                maxX=100000\n",
    "            else:\n",
    "                maxX=abf.dataPointCount\n",
    "            plt.plot(dfv[:100000])\n",
    "            plt.subplot(2,1,2)\n",
    "            plt.plot(dfv)\n",
    "            figout=infile.replace(\".abf\",\"_\"+str(volt)+\"Vm\"+\".png\")\n",
    "            plt.savefig(figout, format=\"png\")\n",
    "        if WRITE_STATUS:\n",
    "            with open(\"convert_status.txt\", \"a\") as f:\n",
    "                f.write(f\"\\n\\nStarting: {infile}\")\n",
    "                f.write(f\"\\nSample Rate {abf.dataRate} Hz\")\n",
    "                f.write(f\"\\nSample Rate {abf.dataPointsPerMs} kHz\")\n",
    "                f.write(f\"\\nSample Interval {1/abf.dataRate} s\")\n",
    "                f.write(f\"\\nSample Interval {1/abf.dataPointsPerMs} ms\")\n",
    "                f.write(f\"\\nNOTE THIS WAS DECIMATED WITH A FACTOR OF {decfac} where 1 = no decimation\")\n",
    "                f.write(f\"\\nDuration {abf.dataLengthSec} s\")\n",
    "                f.write(f\"\\nN data points {abf.dataPointCount}\")\n",
    "                f.write(f\"\\n{infile} Completed\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\n",
      "\n",
      "Starting 2021.03.23\\Cell_1 HEK_BKCa_0000.abf\n"
     ]
    }
   ],
   "source": [
    "for file in files:\n",
    "    print(\"\\n\\n\\n\\nStarting\", file)\n",
    "    do_file(file)\n",
    "    print(\"Completed:\", file)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-60.]\n"
     ]
    }
   ],
   "source": [
    "file = \"2021.03.23\\Cell_2 HEK_BKCa_0000.abf\"\n",
    "abf = pyabf.ABF(file)\n",
    "abf.setSweep(0)\n",
    "voltages=np.round(abf.sweepC/10)*10\n",
    "voltages = np.unique(voltages)\n",
    "print(voltages)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "do_file (file)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dir(abf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(f\"Sample Rate {abf.dataRate} Hz\")\n",
    "print(f\"Sample Rate {abf.dataPointsPerMs} kHz\")\n",
    "print(f\"Sample Interval {1/abf.dataRate} s\")\n",
    "print(f\"Sample Interval {1/abf.dataPointsPerMs} ms\")    \n",
    "print(f\"Duration {abf.dataLengthSec} s\")\n",
    "print(f\"N data points {abf.dataPointCount}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.subplot(2,1,1)\n",
    "plt.title(filein)\n",
    "if abf.dataPointCount > 100000:\n",
    "    maxX=100000\n",
    "else:\n",
    "    maxX=abf.dataPointCount\n",
    "        \n",
    "plt.plot(abf.sweepY[:100000])\n",
    "plt.subplot(2,1,2)\n",
    "plt.plot(abf.sweepY)\n",
    "figout=filein.replace(\".abf\",\".png\")\n",
    "plt.savefig(figout, format=\"png\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(f\"ChannelY -> data length = {abf.sweepY.shape}, max={np.max(abf.sweepY)} and min = {np.min(abf.sweepY)}\" )\n",
    "print(f\"ChannelC -> data length = {abf.sweepC.shape}, max={np.max(abf.sweepC)} and min = {np.min(abf.sweepC)}\" )\n",
    "print(f\"Channelx (time) -> data length = max={np.max(abf.sweepX)} and min = {np.min(abf.sweepX)}\" )\n",
    "print(f\"Average frequency = {0.001* 1/(np.mean(abf.sweepX)/abf.sweepX.shape[0])}kHz\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
